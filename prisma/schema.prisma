generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String     @unique
  imageUrl                String?
  password                String?
  contact                 String?
  address                 String?
  role                    Role       @default(USER)
  isVerified              Boolean    @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  Blog                    Blog[]
  Order                   Order[]
  Review                  Review[]
  wishlist                wishlist[]
  Sale                    Sale[]
  Expense                 Expense[]

  @@map("users")
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String    @unique
  imageUrl     String
  sizes        String[]
  published    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]

  @@map("categories")
}

model Material {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  materialName String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]

  @@map("materials")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String[]
  tags        String[]
  salesCount  Int      @default(0)
  published   Boolean  @default(false)
  materialId  String   @db.ObjectId
  material    Material @relation(fields: [materialId], references: [id])
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Sale        Sale[]

  Review   Review[]
  variants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  size      String
  color     String
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product  Product    @relation(fields: [productId], references: [id])
  wishlist wishlist[]

  @@map("product_variants")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  orderTime  DateTime    @default(now())
  customerId String      @db.ObjectId
  method     String
  email      String
  address    String
  zipcode    String?
  note       String?
  amount     Float
  phone      String?
  isPaid     Boolean
  cartItems  Json
  status     OrderStatus @default(PROCESSING)
  customer   User        @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Sale {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  saleTime   DateTime   @default(now())
  salesmanId String     @db.ObjectId
  amount     Float
  method     String
  isPaid     Boolean
  name       String?
  phone      String?
  address    String?
  reference  String?
  cartItems  Json?
  productId  String?    @db.ObjectId
  product    Product?   @relation(fields: [productId], references: [id])
  status     SaleStatus @default(PENDING)
  saleType   SaleType?  @default(SINGLE)
  salesman   User       @relation(fields: [salesmanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sales")
}

model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  saleTime    DateTime      @default(now())
  salesmanId  String        @db.ObjectId
  amount      Float
  method      String
  isPaid      Boolean
  title       String?
  description String?
  reference   String?
  status      ExpenseStatus @default(PENDING)
  salesman    User          @relation(fields: [salesmanId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  imageUrl  String?
  others    String?
  isPublish Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Int
  title   String
  comment String

  isPublished Boolean @default(false)

  productId String @db.ObjectId
  userId    String @db.ObjectId

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model wishlist {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  variantId String         @db.ObjectId
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum Role {
  USER
  SALESMAN
  ADMIN
}

enum OrderStatus {
  CANCEL
  PROCESSING
  DELIVERED
}

enum SaleStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum ExpenseStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum SaleType {
  SINGLE
  BULK
}
