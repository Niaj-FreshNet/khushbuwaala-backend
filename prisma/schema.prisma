generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SALESMAN
  ADMIN
  SUPER_ADMIN
}

enum OrderSource {
  WEBSITE
  SHOWROOM
  WHOLESALE
  MANUAL
}

enum SaleType {
  SINGLE
  BULK
}

enum OrderStatus {
  CANCEL
  PROCESSING
  DELIVERED
}

enum ExpenseStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum Unit {
  ML
  GM
  PIECE
}

enum CartItemStatus {
  IN_CART
  ORDERED
  SOLD
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String    @unique
  password                String?
  imageUrl                String?
  phone                   String?
  address                 String?
  role                    Role      @default(USER)
  isVerified              Boolean   @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  Blog           Blog[]
  Review         Review[]
  orderItems     CartItem[]
  wishlist       Wishlist[]
  Expense        Expense[]
  customerOrders Order[]    @relation("CustomerOrders")
  salesmanOrders Order[]    @relation("SalesmanOrders")

  @@map("users")
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String    @unique
  imageUrl     String?
  sizes        String[]  @default([])
  unit         String?
  published    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]

  @@map("categories")
}

model Material {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  materialName String   @unique
  imageUrl     String?
  published    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ProductMaterial ProductMaterial[]

  @@map("materials")
}

model Fragrance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fragranceName String   @unique
  imageUrl      String?
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ProductFragrance ProductFragrance[]

  @@map("fragrances")
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String   @unique
  description  String
  primaryImage String
  otherImages  String[]
  videoUrl     String?
  tags         String[]
  salesCount   Int      @default(0)
  published    Boolean  @default(false)

  // Perfume specifications
  origin       String?
  brand        String?
  gender       String?
  perfumeNotes Json? // { top: [...], middle: [...], base: [...] }
  accords      String[]
  performance  String?
  longevity    String?
  projection   String?
  sillage      String?
  bestFor      String[]

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  ProductMaterial  ProductMaterial[]
  ProductFragrance ProductFragrance[]

  // Variants and combos
  variants      ProductVariant[]
  comboVariants ComboVariant[]

  supplier  String?
  // Stock for the product (aggregate for all variants)
  stock     Float      @default(0) // e.g., 1 kg or 1000 ml
  stocklogs StockLog[]

  // Discounts (can be applied per product)
  discounts Discount[]

  // Related products (self-relation)
  // relatedProducts Product[] @relation("RelatedProducts", references: [id])
  // relatedTo       Product[] @relation("RelatedProducts")  

  // Reviews
  Review Review[]

  orderItems CartItem[]
  wishlist   Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

// Junction tables
model ProductMaterial {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String @db.ObjectId
  materialId String @db.ObjectId

  product  Product  @relation(fields: [productId], references: [id])
  material Material @relation(fields: [materialId], references: [id])

  @@unique([productId, materialId])
  @@map("product_materials")
}

model ProductFragrance {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  productId   String @db.ObjectId
  fragranceId String @db.ObjectId

  product   Product   @relation(fields: [productId], references: [id])
  fragrance Fragrance @relation(fields: [fragranceId], references: [id])

  @@unique([productId, fragranceId])
  @@map("product_fragrances")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  sku       String   @unique
  unit      Unit
  size      Float // e.g. 3, 6, 12 ml or 100, 500 gm
  price     Float
  // stock     Float // tracks ml or gm left in inventory
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product       Product        @relation(fields: [productId], references: [id])
  // wishlist wishlist[]
  comboVariants ComboVariant[]

  orderItems CartItem[]
  stocklogs  StockLog[]

  // Discounts (can be applied per variant)
  discounts Discount[]

  @@map("product_variants")
}

model ComboProduct {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  primaryImage String
  otherImages  String[]
  price        Float
  published    Boolean  @default(false)
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  variants ComboVariant[]

  @@map("combo_products")
}

model ComboVariant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  comboId   String @db.ObjectId
  productId String @db.ObjectId
  variantId String @db.ObjectId
  quantity  Int    @default(1)

  combo   ComboProduct   @relation(fields: [comboId], references: [id])
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("combo_variants")
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderTime   DateTime    @default(now())
  amount      Float
  isPaid      Boolean
  cartItems   Json?
  status      OrderStatus @default(PROCESSING)
  orderSource OrderSource @default(WEBSITE)

  // Website orders
  customerId String? @db.ObjectId
  customer   User?   @relation("CustomerOrders", fields: [customerId], references: [id])

  productIds String[]

  // Manual sales
  salesmanId String?   @db.ObjectId
  salesman   User?     @relation("SalesmanOrders", fields: [salesmanId], references: [id])
  saleType   SaleType? @default(SINGLE)

  // Optional walk-in customer info
  name    String?
  phone   String?
  email   String?
  address String?

  // Relation to CartItem
  orderItems     CartItem[] @relation("Order_CartItems")

  payments       Payment[]
  orderDiscounts OrderDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String? @db.ObjectId // optional, for guest carts
  productId String  @db.ObjectId
  variantId String? @db.ObjectId
  quantity  Int     @default(1)
  price     Float

  status CartItemStatus @default(IN_CART) // IN_CART, ORDERED, SOLD

  // Relations
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  user    User?           @relation(fields: [userId], references: [id])

  orderId String? @db.ObjectId
  order   Order?  @relation("Order_CartItems", fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model StockLog {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  productId String         @db.ObjectId
  variantId String         @db.ObjectId
  product   Product        @relation(fields: [productId], references: [id])
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  change    Float // +10 (restock), -2 (sold), etc.
  reason    String // e.g. SALE, RETURN, ADJUSTMENT
  createdAt DateTime       @default(now())
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
}

model Discount {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  variantId String?   @db.ObjectId // null means discount is for the whole product
  code      String? // optional promo code
  type      String // "percentage" | "fixed"
  value     Float
  maxUsage  Int? // optional
  startDate DateTime?
  endDate   DateTime?

  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  OrderDiscount OrderDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderDiscount {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  discountId String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id])
  discount   Discount @relation(fields: [discountId], references: [id])
}

model Expense {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  expenseTime DateTime      @default(now())
  amount      Float
  method      String
  isPaid      Boolean
  title       String?
  description String?
  reference   String?
  status      ExpenseStatus @default(PENDING)

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  imageUrl  String?
  others    String?
  isPublish Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Review {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  title       String
  comment     String
  isPublished Boolean @default(false)

  productId String @db.ObjectId
  userId    String @db.ObjectId

  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
